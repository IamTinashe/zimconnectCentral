'use strict';
const express = require('express');
const router = express.Router();
const Models = require('../models');
const Mails = require('../mails');



/**
 * @swagger
 * components:
 *  schemas:
 *   User:
 *    type: object 
 *    properties:
 *     username:
 *      type: string
 *      description: Username of the user
 *     userAuthID:
 *      type: string
 *      description: Autogenerated AuthID of the user
 *     fullname:
 *      type: string
 *      description: User fullname
 *     company:
 *      type: string
 *      description: Company of the user.
 *     email:
 *      type: string
 *      format: email
 *      description: Email of the user
 *     role:
 *      type: string
 *      description: Role of the user.
 *     _id:
 *      type: string
 *      description: Autogenerated id
 *     createdAt:
 *      type: string
 *      description: Autogenerated Date of creation of the user.
 *     loggedIn:
 *      type: boolean
 *      description: Is the user logged in or not.
 *    loggedInAt:
 *     type: string
 *     description: Autogenerated Date of last login of the user.
 *   Error:
 *    type: object 
 *    properties:
 *     user:
 *      type: boolean
 *      description: false by default.
 *     message:
 *      type: string
 *      description: Error message
 *     status:
 *      type: number
 *      description: Status code
 *   LoggedOut:
 *    type: object 
 *    properties:
 *     user:
 *      type: boolean
 *      description: true if user is logged out.
 *     message:
 *      type: string
 *      description: Successfully logged out message.
 * securitySchemes:
 *  BearerAuth:
 *    type: http
 *    scheme: bearer
 *    bearerFormat: JWT
 */

/**
* @swagger
*  definitions:
*   Auth:
*    type: object
*    required:
*     - email
*     - password
*    properties:
*     email:
*      type: string
*      format: email
*      description: Email of the user
*     password:
*      type: string
*      description: Password of the user
*   Confirm:
*    type: object
*    required:
*     - email
*     - confirmationCode
*    properties:
*     email:
*      type: string
*      format: email
*      description: Email of the user
*     confirmationCode:
*      type: number
*      description: Confirmation code of the user
*   Forgot:
*    type: object
*    required:
*     - email
*    properties:
*     email:
*      type: string
*      format: email
*      description: Email of the user
*   Reset:
*    type: object
*    required:
*     - email
*     - password
*     - confirmationCode
*    properties:
*     email:
*      type: string
*      format: email
*      description: Email of the user
*     password:
*      type: string
*      description: Password of the user
*     confirmationCode:
*      type: number
*      description: Confirmation code of the user
*/


/**
 * @swagger
 * /auth/all:
 *   get:
 *     tags:
 *       - Authentication
 *     description: Gets all auth users
 *     produces:
 *       - application/json
 *     responses:
 *       200:
 *         description: User successfully created and email sent
 *       500:
 *         description: Internal Server Error
 */
router.get('/all', async (req, res) => {
  let models = new Models();
  try {
    let data = await models.getAuth();
    return res.status(200).json(data);
  } catch (error) {
    return res.status(500).json(error);
  }
});


/**
 * @swagger
 * /auth/login:
 *   post:
 *     tags:
 *       - Authentication
 *     description: Authenticates User
 *     produces:
 *       - application/json
 *     consumes:
 *       - application/json
 *     parameters:
 *       - in: body
 *         name: body
 *         description: Login credentials
 *         required: true
 *         schema:
 *          $ref: '#/definitions/Auth'
 *     responses:
 *       200:
 *         description: User successfully logged in
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/User'
 *       401:
 *         description: Unauthorized
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       404:
 *         description: User not found
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       500:
 *         description: Internal Server Error
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 */
router.post('/login', async (req, res) => {
  let models = new Models();
  try {
    let data = await models.authenticate(req.body);
    if (data.hasOwnProperty('user') && data.user == false) {
      return res.status(data.status).json(data);
    } else{
      let token = 1;
      return res.header('Authorization', `Bearer ${token}`).status(200).json(data);
    }
  } catch (error) {
    return res.status(500).json(error);
  }
});

/**
 * @swagger
 * /auth/confirm:
 *   put:
 *     tags:
 *       - Authentication
 *     description: Confirms User account
 *     produces:
 *       - application/json
 *     consumes:
 *       - application/json
 *     parameters:
 *       - name: confirmation
 *         description: confirmation object
 *         in: body
 *         required: true
 *         schema:
 *          $ref: '#/definitions/Confirm'
 *     responses:
 *       201:
 *         description: User successfully confirmed email
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/User'
 *       401:
 *         description: Unauthorized
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       404:
 *         description: User not found
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       500:
 *         description: Internal Server Error
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 */
 router.put('/confirm', async (req, res) => {
  let models = new Models();
  let mails = new Mails();
  try {
    let data = await models.confirm(req.body);
    if (data.hasOwnProperty('user') && data.user == false) {
      return res.status(data.status).json(data);
    } else{
      let token = 1;
      await mails.accountConfirmed(data);
      return res.header('Authorization', `Bearer ${token}`).status(201).json(data);
    }
  } catch (error) {
    return res.status(500).json(error);
  }
});

/**
 * @swagger
 * /auth/forgot:
 *   put:
 *     tags:
 *       - Authentication
 *     description: Sends reset password email
 *     produces:
 *       - application/json
 *     consumes:
 *       - application/json
 *     parameters:
 *       - name: forgot
 *         description: forgot object
 *         in: body
 *         required: true
 *         schema:
 *          $ref: '#/definitions/Forgot'
 *     responses:
 *       201:
 *         description: User successfully sent reset password email
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/User'
 *       401:
 *         description: Unauthorized
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       404:
 *         description: User not found
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       500:
 *         description: Internal Server Error
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 */
 router.put('/forgot', async (req, res) => {
  let models = new Models();
  let mails = new Mails();
  try {
    let data = await models.forgotPassword(req.body);
    if (data.hasOwnProperty('user') && data.user == false) {
      return res.status(data.status).json(data);
    } else{
      await mails.forgotPassword(data);
      return res.status(201).json(data);
    }
  } catch (error) {
    return res.status(500).json(error);
  }
});

/**
 * @swagger
 * /auth/reset:
 *   put:
 *     tags:
 *       - Authentication
 *     description: Resets password
 *     produces:
 *       - application/json
 *     consumes:
 *       - application/json
 *     parameters:
 *       - name: reset
 *         description: reset object
 *         in: body
 *         required: true
 *         schema:
 *          $ref: '#/definitions/Reset'
 *     responses:
 *       201:
 *         description: User successfully reset password
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/User'
 *       401:
 *         description: Unauthorized
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       404:
 *         description: User not found
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       500:
 *         description: Internal Server Error
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 */
 router.put('/reset', async (req, res) => {
  let models = new Models();
  let mails = new Mails();
  try {
    let data = await models.resetPassword(req.body);
    if (data.hasOwnProperty('user') && data.user == false) {
      return res.status(data.status).json(data);
    } else{
      await mails.resetPassword(data);
      return res.status(201).json(data);
    }
  } catch (error) {
    return res.status(500).json(error);
  }
});


/**
 * @swagger
 * /auth/logout:
 *   post:
 *     tags:
 *       - Authentication
 *     description: Logs out user
 *     produces:
 *       - application/json
 *     consumes:
 *       - application/json
 *     parameters:
 *       - in: body
 *         name: body
 *         description: Logs out user
 *         required: true
 *         schema:
 *          $ref: '#/definitions/Forgot'
 *     responses:
 *       201:
 *         description: User successfully logged out
 *         schema:
 *          type: boolean
 *          $ref: '#/components/schemas/LoggedOut'
 *       401:
 *         description: Unauthorized
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       404:
 *         description: User not found
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 *       500:
 *         description: Internal Server Error
 *         schema:
 *          type: object
 *          $ref: '#/components/schemas/Error'
 */
 router.put('/logout', async (req, res) => {
  let models = new Models();
  try {
    let data = await models.logout(req.body);
    if (data.hasOwnProperty('user') && data.user == false) {
      return res.status(data.status).json(data);
    } else{
      return res.status(201).json(data);
    }
  } catch (error) {
    return res.status(500).json(error);
  }
});

module.exports = router;